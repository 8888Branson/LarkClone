package(default_visibility = ["//visibility:public"])

load("@rules_rust//rust:defs.bzl", "rust_static_library")
load("@rules_cc//cc:defs.bzl", "cc_import", "cc_library")
load("@rules_proto//proto:defs.bzl", "proto_library")
load("@rules_swift//proto:swift_proto_library.bzl", "swift_proto_library")
load("@rules_cc//cc:objc_library.bzl", "objc_library")

proto_library(
    name = "protos",
    srcs = glob(["src/lark_sdk_pb/*.proto"]),
)
swift_proto_library(
    name = "proto_swift",
    protos = [":protos"],
)

rust_static_library(
    name = "rust_sdk_lib",
    srcs = glob(["src/**/*.rs"]),
    crate_root = "src/lib.rs",
    deps = [
        "@crates//:prost",
        "@crates//:plist",
        "@crates//:libc",
    ],
    target_compatible_with = ["@platforms//os:ios", "@platforms//cpu:aarch64"],
)

# Generate the Rust SDK header using cbindgen
# genrule(
#     name = "rust_sdk_header",
#     srcs = [
#         "cbindgen.toml",
#         "src/lib.rs",
#         ":rust_sdk_lib",
#     ],
#     outs = ["rust_sdk.h"],
#     cmd = """
#     if ! command -v cbindgen &> /dev/null; then
#         echo "Error: cbindgen not found. Installing with cargo..." 
#         cargo install --quiet cbindgen || exit 1
#     fi
    
#     # 直接生成头文件，不做任何额外处理
#     cbindgen --config $(location cbindgen.toml) --output $(location rust_sdk.h) $(location src/lib.rs) --lang c
#     """,
# )
objc_library(
    name = "RustSDKHeaders",
    hdrs = glob(["**/*.h"]),
    # deps = ["//RustSDK:rust_sdk"],
    includes = ["include","."],
    visibility = ["//visibility:public"],
)
# 使用 cc_import 来引用预构建的 Rust 静态库
cc_import(
    name = "rust_sdk",
    hdrs = ["include/rust_sdk.h"],
    static_library = ":rust_sdk_lib",
    target_compatible_with = ["@platforms//os:ios", "@platforms//cpu:aarch64"],
)