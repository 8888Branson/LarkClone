// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: mail.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Lark_MailItem: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 唯一标识符 (对应 NSString *id)
  public var id: String = String()

  /// 发件人 (对应 NSString *sender)
  public var sender: String = String()

  /// 发件人头像URL (对应 nullable NSString *senderAvatar)
  public var senderAvatar: String = String()

  /// 邮件主题 (对应 NSString *subject)
  public var subject: String = String()

  /// 预览文本 (对应 NSString *preview)
  public var preview: String = String()

  /// 日期字符串 (对应 NSString *dateString -> NSDate *date)
  /// 使用标准格式 "yyyy-MM-dd HH:mm:ss" 的字符串
  public var dateString: String = String()

  /// 是否已读 (对应 BOOL isRead)
  public var isRead: Bool = false

  /// 是否有附件 (对应 BOOL hasAttachment)
  public var hasAttachment_p: Bool = false

  /// 是否官方邮件 (对应 BOOL isOfficial)
  public var isOfficial: Bool = false

  /// 会话邮件数量 (对应 nullable NSNumber *emailCount)
  /// 使用 optional 表示可空
  public var emailCount: Int32 {
    get {return _emailCount ?? 0}
    set {_emailCount = newValue}
  }
  /// Returns true if `emailCount` has been explicitly set.
  public var hasEmailCount: Bool {return self._emailCount != nil}
  /// Clears the value of `emailCount`. Subsequent reads from it will return its default value.
  public mutating func clearEmailCount() {self._emailCount = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _emailCount: Int32? = nil
}

/// 邮件列表响应
public struct Lark_MailItemList: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var items: [Lark_MailItem] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "lark"

extension Lark_MailItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MailItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "sender"),
    3: .standard(proto: "sender_avatar"),
    4: .same(proto: "subject"),
    5: .same(proto: "preview"),
    6: .standard(proto: "date_string"),
    7: .standard(proto: "is_read"),
    8: .standard(proto: "has_attachment"),
    9: .standard(proto: "is_official"),
    10: .standard(proto: "email_count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.senderAvatar) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.subject) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.preview) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.dateString) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.isRead) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.hasAttachment_p) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self.isOfficial) }()
      case 10: try { try decoder.decodeSingularInt32Field(value: &self._emailCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 2)
    }
    if !self.senderAvatar.isEmpty {
      try visitor.visitSingularStringField(value: self.senderAvatar, fieldNumber: 3)
    }
    if !self.subject.isEmpty {
      try visitor.visitSingularStringField(value: self.subject, fieldNumber: 4)
    }
    if !self.preview.isEmpty {
      try visitor.visitSingularStringField(value: self.preview, fieldNumber: 5)
    }
    if !self.dateString.isEmpty {
      try visitor.visitSingularStringField(value: self.dateString, fieldNumber: 6)
    }
    if self.isRead != false {
      try visitor.visitSingularBoolField(value: self.isRead, fieldNumber: 7)
    }
    if self.hasAttachment_p != false {
      try visitor.visitSingularBoolField(value: self.hasAttachment_p, fieldNumber: 8)
    }
    if self.isOfficial != false {
      try visitor.visitSingularBoolField(value: self.isOfficial, fieldNumber: 9)
    }
    try { if let v = self._emailCount {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 10)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lark_MailItem, rhs: Lark_MailItem) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.sender != rhs.sender {return false}
    if lhs.senderAvatar != rhs.senderAvatar {return false}
    if lhs.subject != rhs.subject {return false}
    if lhs.preview != rhs.preview {return false}
    if lhs.dateString != rhs.dateString {return false}
    if lhs.isRead != rhs.isRead {return false}
    if lhs.hasAttachment_p != rhs.hasAttachment_p {return false}
    if lhs.isOfficial != rhs.isOfficial {return false}
    if lhs._emailCount != rhs._emailCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lark_MailItemList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MailItemList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "items"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lark_MailItemList, rhs: Lark_MailItemList) -> Bool {
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
